import os
import sqlite3
from dotenv import load_dotenv
import pandas as pd
import telebot
from telebot import types
import requests
# from lxml import html

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('sites.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sites (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        url TEXT NOT NULL UNIQUE,
        xpath TEXT NOT NULL
    )
    ''')
    conn.commit()
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_load = types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
    item_parse = types.KeyboardButton("–ü–∞—Ä—Å–∏–Ω–≥")
    markup.add(item_load, item_parse)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"
@bot.message_handler(func=lambda message: message.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
def request_file(message):
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:\n"
                                            "1. title - –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                                            "2. url - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫\n"
                                            "3. xpath - –ø—É—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ü–µ–Ω–æ–π")
    bot.register_next_step_handler(msg, handle_file)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@bot.message_handler(content_types=['document'])
def handle_file(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel —Ñ–∞–π–ª
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        file_extension = message.document.file_name.split('.')[-1].lower()
        if file_extension not in ['xlsx', 'xls']:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = f"temp_{message.chat.id}.xlsx"
        with open(temp_file, 'wb') as new_file:
            new_file.write(downloaded_file)

        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é pandas
        try:
            df = pd.read_excel(temp_file, engine='openpyxl')  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}")
            return
        # try:git commit -m "First commit"
        #     df = pd.read_excel(temp_file)
        # except Exception as e:
        #     bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {str(e)}")
        #     os.remove(temp_file)
        #     return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = ['title', 'url', 'xpath']
        missing_columns = [col for col in required_columns if col not in df.columns]

        if missing_columns:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_columns)}")
            os.remove(temp_file)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if df[required_columns].isnull().values.any():
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö")
            os.remove(temp_file)
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('sites.db')
        cursor = conn.cursor()

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å)
        cursor.execute("DELETE FROM sites")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        for _, row in df.iterrows():
            try:
                cursor.execute("INSERT INTO sites (title, url, xpath) VALUES (?, ?, ?)",
                               (row['title'], row['url'], row['xpath']))
                conn.commit()
            except sqlite3.IntegrityError:
                bot.reply_to(message, f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: URL {row['url']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –∏ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω")
                continue

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cursor.execute("SELECT * FROM sites")
        db_data = cursor.fetchall()
        conn.close()

        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î
        db_df = pd.DataFrame(db_data, columns=['id', 'title', 'url', 'xpath'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
        bot.send_message(message.chat.id, f"```\n{df.to_string(index=False)}\n```", parse_mode='Markdown')

        bot.send_message(message.chat.id, "üì¶ –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        bot.send_message(message.chat.id, f"```\n{db_df.to_string(index=False)}\n```", parse_mode='Markdown')

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file)

    except Exception as e:
        bot.reply_to(message, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
        if 'temp_file' in locals() and os.path.exists(temp_file):
            os.remove(temp_file)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–∞—Ä—Å–∏–Ω–≥"
@bot.message_handler(func=lambda message: message.text == "–ü–∞—Ä—Å–∏–Ω–≥")
def start_parsing(message):
    try:
        conn = sqlite3.connect('sites.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM sites")
        sites = cursor.fetchall()
        conn.close()

        if not sites:
            bot.reply_to(message, "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
            return

        bot.send_message(message.chat.id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω...")

        results = []
        errors = []

        for site in sites:
            id_, title, url, xpath = site
            try:
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã —Å–∞–π—Ç—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }

                response = requests.get(url, headers=headers, timeout=10)
                response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP

                tree = html.fromstring(response.content)
                price_element = tree.xpath(xpath)

                if not price_element:
                    errors.append(f"{title}: —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ XPath")
                    continue

                price_text = price_element[0].text.strip()

                # –û—á–∏—Å—Ç–∫–∞ —Ü–µ–Ω—ã –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                price_value = ''.join(c for c in price_text if c.isdigit() or c == '.')

                if not price_value:
                    errors.append(f"{title}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞")
                    continue

                price = float(price_value)
                results.append({'title': title, 'price': price, 'url': url})

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                bot.send_message(message.chat.id, f"üîπ {title}: {price} —Ä—É–±. [–£—Å–ø–µ—à–Ω–æ]")

            except Exception as e:
                errors.append(f"{title}: {str(e)}")
                continue

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n"

        if results:
            df_results = pd.DataFrame(results)
            report += "–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n"
            report += df_results[['title', 'price']].to_string(index=False) + "\n\n"

            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            avg_price = df_results['price'].mean()
            report += f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.2f} —Ä—É–±.\n\n"

        if errors:
            report += "–û—à–∏–±–∫–∏:\n" + "\n".join(f"‚ùå {error}" for error in errors)

        bot.send_message(message.chat.id, report)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")


if __name__ == '__main__':
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)